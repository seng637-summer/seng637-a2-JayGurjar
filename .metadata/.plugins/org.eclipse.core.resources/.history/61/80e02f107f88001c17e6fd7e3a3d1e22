package org.jfree.data.test;

import static org.junit.Assert.*;
import org.jfree.data.Range;
import org.junit.*;

public class RangeTest {
	private Range exampleRange;
	@BeforeClass public static void setUpBeforeClass () throws Exception {
		
	}
	private static final double EPSILON = 0.0000000001;
	@Before
	public void setUp() throws Exception { 
		exampleRange = new Range (0.0, 1.0);
	}
	
	//  Test cases for contains()
	@Test
	public void containsShouldNotBeNaN() {
		assertFalse(exampleRange.contains(Double.NaN));
	}
	
	@Test
	public void containsShouldNotBeNegativeOne() {
		assertFalse(exampleRange.contains(-1.0));
	}
	
	@Test
	public void containsShouldBeZeroPointFive () {
		assertTrue(exampleRange.contains(0.5));
	}
	
	//Test cases for constrain()
	
	@Test
	public void constrainShouldBeZeroPointFive () {
		assertEquals(0.5, exampleRange.constrain(0.5), 0.0000001);
	}
	
	@Test
	public void constrainShouldBeOne () {
		assertEquals(1.0, exampleRange.constrain(Double.POSITIVE_INFINITY), 0.0000001);
	}
	
	@Test
	public void constrainShouldBeNan() {
		assertTrue(Double.isNaN(exampleRange.constrain(Double.NaN)));
	}
	
	
	//Test cases for intersects() methods
	@Test
	public void intersectShouldNotBeInBetweenNegativeTwoAndNegativeOne() {
		 assertFalse(exampleRange.intersects(-2.0, -1.0));
	}
	
	@Test
	public void intersectsShouldNotBeInBetweenOneAndOne () {
		 assertFalse(exampleRange.intersects(1.0, 1.1));
	}
	
	@Test
	public void intersectsShouldBeInBetweenZeroPointFiveAndZeroPointSix () {
		assertTrue(exampleRange.intersects(0.5, 0.6));
	}
	
	//Test cases for combine()
	Range r1 = new Range(1.0, 2.0);
    Range r2 = new Range(1.5, 2.5);
	@Test
	public void combineShouldBeNull() {
		assertNull(Range.combine(null, null));
	}
	
	@Test
	public void combineShouldBeEqualTor1 () {
		Range r3 = new Range(Double.NaN, 1.3);
        Range rr = Range.combine(r1, r3);
		assertEquals(2.0, rr.getUpperBound(), EPSILON);
	}
	
	@Test
	public void combineTestCase () {
		 Range r4 = new Range(1.7, Double.NaN);
	     Range rr = Range.combine(r4, r1);
	     assertEquals(1.0, rr.getLowerBound(), EPSILON);
	     assertTrue(Double.isNaN(rr.getUpperBound()));
	}
	
	//Is Nan cases
	@Test
    public void isNaNRangeShouldBeTrue() {
        assertTrue(new Range(Double.NaN, Double.NaN).isNaNRange());
    }
    
    @Test
    public void isNaNRangeShouldBeFalse() {
        assertFalse(new Range(1.0, 2.0).isNaNRange());
    }
    
    @Test
    public void isNaNRangeShouldBeNotInNaNRange() {
        assertFalse(new Range(Double.NaN, 2.0).isNaNRange());
    }
    
	
	@After
	public void tearDown() throws Exception {
		
	}
	
	@AfterClass
	public static void tearDownAfterClass() throws Exception{
		
	}

}
	
